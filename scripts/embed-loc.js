// read strings.tsv and put into a JSON file

const fs = require("fs");

// In
const stringsTsvFilePath = "./localize/strings.tsv";
const languageCodeTsvFilePath = "./localize/language-code.tsv"; // not used in this script, but can be used to generate a mapping table

// Out
const stringsJsonFilePath = "./src/core/localize/strings.json";
const languageEnumFilePath = "./src/core/localize/Language.ts";
const languageMapFilePath = "./src/core/localize/languageMap.ts";

const stringsTsv = fs.readFileSync(stringsTsvFilePath, "utf-8");

// gather by language
const rows = stringsTsv
    .trim()
    .split("\n")
    .map((line) => line.split("\t"));

if (rows[0][0] === "Language") {
    rows[0][0] = "English";
} else {
    console.error("First column must be 'Language'");
    process.exit(1);
}

// check each row has the same length
const languages = rows.filter((row, index) => {
    const allValuesPresent = row.length === rows[0].length;
    if (!allValuesPresent) {
        console.error(`Row [${index}] has different length than the first row`);
    }
    return allValuesPresent;
});

const stringsJson = {};
languages.reduce((acc, row) => {
    const [lang, ...values] = row;
    if (!acc[lang]) {
        acc[lang] = values;
    }
    return acc;
}, stringsJson);

// write to file
const jsonString = JSON.stringify(stringsJson, null, 4) + "\n";
fs.writeFileSync(stringsJsonFilePath, jsonString, "utf-8");
const languageList = Object.getOwnPropertyNames(stringsJson);
console.log(
    `Wrote ${Object.keys(stringsJson).length} languages {${languageList.join(", ")}} to ${stringsJsonFilePath}`
);

// Write Language Enum
const languagesEnum = `// Autogenerated file, do not manually modify

export enum Language {
    /**
     * Default language of the Office Application or English if not available.
     */
    Default = "Default",

    ${languageList.map((lang) => `${lang} = "${lang}"`).join(",\n    ")},

    /**
     * Pseudo language for testing.
     */
    Pseudo = "Pseudo",
}
`;
fs.writeFileSync(languageEnumFilePath, languagesEnum, "utf-8");
console.log(`Wrote Language enum to ${languageEnumFilePath}`);

// Write mapping table

const languageCodeTsv = fs.readFileSync(languageCodeTsvFilePath, "utf-8");

/**
 * @type {[string, string][]}
 */
const languageCodeRows = languageCodeTsv
    .trim()
    .split("\n")
    .map((line) => line.split("\t"))
    .map((row) => {
        const [lang, code] = row;
        const simpleLang = lang.trim().split(" ")[0].trim();
        const simpleCode = code.trim().split("-")[0];
        return [simpleLang, simpleCode];
    });

const languageCodeMap = new Map(languageCodeRows);

const langCodes = languageList.map((lang) => {
    const code = languageCodeMap.get(lang);
    if (!code) {
        console.error(`Language ${lang} not found in language code mapping`);
        process.exit(1);
    }
    return [lang, code];
});

const languageMap = `// Autogenerated file, do not manually modify

import { Language } from "./Language";

/**
 * Map of display languages to Language enum values.
 * Only do prefix matching for the language code.
 * https://www.rfc-editor.org/info/bcp47
 */
export const languageMap = new Map<string, Exclude<Language, Language.Default>>([
    ${langCodes
        .map(([lang, code]) => {
            return `["${code}", Language.${lang}],`;
        })
        .join("\n    ")}
]);
`;
fs.writeFileSync(languageMapFilePath, languageMap, "utf-8");
console.log(`Wrote languageMap to ${languageMapFilePath}`);
