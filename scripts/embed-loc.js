// read strings.tsv and put into a JSON file

const fs = require("fs");

const stringsTsvFilePath = "./localize/strings.tsv";
const stringsJsonFilePath = "./src/core/localize/strings.json";
const languageEnumFilePath = "./src/core/localize/Language.ts";

const stringsTsv = fs.readFileSync(stringsTsvFilePath, "utf-8");

// gather by language
const rows = stringsTsv
    .trim()
    .split("\n")
    .map((line) => line.split("\t"));

if (rows[0][0] === "Language") {
    rows[0][0] = "English";
} else {
    console.error("First column must be 'Language'");
    process.exit(1);
}

// check each row has the same length
const languages = rows.filter((row, index) => {
    const allValuesPresent = row.length === rows[0].length;
    if (!allValuesPresent) {
        console.error(`Row [${index}] has different length than the first row`);
    }
    return allValuesPresent;
});

const stringsJson = {};
languages.reduce((acc, row) => {
    const [lang, ...values] = row;
    if (!acc[lang]) {
        acc[lang] = values;
    }
    return acc;
}, stringsJson);

// write to file
const jsonString = JSON.stringify(stringsJson, null, 4);
fs.writeFileSync(stringsJsonFilePath, jsonString, "utf-8");
const languageList = Object.getOwnPropertyNames(stringsJson);
console.log(
    `Wrote ${Object.keys(stringsJson).length} languages {${languageList.join(", ")}} to ${stringsJsonFilePath}`
);

// Write Language Enum
const languagesEnum = `
// Autogenerated file, do not manually modify
export enum Language {
    ${languageList.map((lang) => `${lang} = "${lang}"`).join(",\n    ")}
}
`;
fs.writeFileSync(languageEnumFilePath, languagesEnum, "utf-8");
console.log(`Wrote Language enum to ${languageEnumFilePath}`);
